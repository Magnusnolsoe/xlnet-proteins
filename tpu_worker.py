import socket
import os
import json
from sigopt import Connection
from absl import flags, app

flags.DEFINE_string("api_token", default="",
      help="SigOpt api token")
flags.DEFINE_string("experiment_id", default="",
      help="SigOpt experiment ID")
flags.DEFINE_string("bucket_name", default="",
      help="Name of gcp bucket")


def generate_model_dir(dirname)
    model_dir = os.path.join(FLAGS.bucket_name, "models", dirname)
    if tf.gfile.Exists(model_dir):
        tf.gfile.DeleteRecursively(model_dir)
    tf.gfile.MakeDirs(model_dir)

    return model_dir


def generate_param_config(params):
    param_keys = ["master", "tpu", "gcp_project", "tpu_zone", "use_tpu",
                "num_hosts", "num_core_per_host", "track_mean",
                "run_id", "num_passes", "record_info_dir", "model_dir",
                "init_checkpoint", "logDir", "learning_rate", "clip",
                "min_lr_ratio", "warmup_steps", "adam_epsilon",
                "decay_method", "weight_decay", "batch_size",
                "train_steps", "iterations", "save_steps", "max_save",
                "seq_len", "reuse_len", "perm_size", "bi_data",
                "mask_alpha", "mask_beta", "num_predict", "n_token",
                "mem_len", "same_length", "clamp_len", "n_layer",
                "d_model", "d_embed", "n_head", "d_head", "d_inner",
                "dropout", "dropatt", "untie_r", "summary_type", 
                "ff_activation", "use_bfloat16", "init", "init_std",
                "init_range", "bucket_uri"]

    # TODO: MADE IT HERE!
    
    



def run_worker(unused_args):
    del unused_args

    conn = Connection(client_token=FLAGS.api_token)
    hostname = socket.gethostname()

    experiment = conn.experiments(FLAGS.experiment_id).fetch()
    while experiment.progress.observation_count < experiment.observation_budget:
        suggestion = conn.experiments(experiment.id).suggestions().create()

        # TODO: create model_dir, config and start training
        model_dir = generate_model_dir(suggestion.id)
        config_path = generate_param_config(suggestion.assignments)


        if os.system():
            # TODO: recover from failed call
            pass
        
        results = dict() # TODO: read results from suggestion generated by train_tpu.py

        # Report an Observation
        conn.experiments(experiment.id).observations().create(
            suggestion=suggestion.id,
            value=results['value'],
            metadata=dict(avg_train_time=results['avg_train_time'], avg_eval_time=results['avg_eval_time'])
        )

        # Update the experiment object
        experiment = conn.experiments(experiment.id).fetch()

        tf.gfile.DeleteRecursively(model_dir)

if __name__ == "__main__":
    FLAGS = flags.FLAGS
    app.run(run_worker)